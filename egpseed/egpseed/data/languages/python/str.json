{
    "capitalize": {
        "inline": "{i0}.capitalize()",
        "description": "capitalize",
        "num_inputs": 1
    },
    "casefold": {
        "inline": "{i0}.casefold()",
        "description": "casefold",
        "num_inputs": 1
    },
    "center1": {
        "inline": "{i0}.center({i1})",
        "inputs": [
            "str",
            "egp_integral"
        ],
        "description": "center"
    },
    "center2": {
        "inline": "{i0}.center({i1}, {i2})",
        "inputs": [
            "str",
            "egp_integral",
            "str"
        ],
        "description": "center with fill character"
    },
    "count1": {
        "inline": "{i0}.count({i1})",
        "description": "count",
        "outputs": [
            "int"
        ]
    },
    "count2": {
        "inline": "{i0}.count({i1}, {i2})",
        "inputs": [
            "str",
            "str",
            "egp_integral"
        ],
        "description": "count from",
        "outputs": [
            "int"
        ]
    },
    "count3": {
        "inline": "{i0}.count({i1}, {i2}, {i3})",
        "inputs": [
            "str",
            "str",
            "egp_integral",
            "egp_integral"
        ],
        "description": "count from to",
        "outputs": [
            "int"
        ]
    },
    "encode": {
        "inline": "{i0}.encode()",
        "description": "encode",
        "num_inputs": 1,
        "outputs": [
            "bytes"
        ]
    },
    "endswith1": {
        "inline": "{i0}.endswith({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "ends with",
        "outputs": [
            "bool"
        ]
    },
    "endswith2": {
        "inline": "{i0}.endswith({i1}, 0, {i2})",
        "inputs": [
            "str",
            "str",
            "egp_integral"
        ],
        "description": "ends with from",
        "outputs": [
            "bool"
        ]
    },
    "endswith3": {
        "inline": "{i0}.endswith({i1}, {i2}, {i3})",
        "inputs": [
            "str",
            "str",
            "egp_integral",
            "egp_integral"
        ],
        "description": "ends with from to",
        "outputs": [
            "bool"
        ]
    },
    "expandtabs0": {
        "inline": "{i0}.expandtabs()",
        "description": "expand tabs size 8",
        "num_inputs": 1
    },
    "expandtabs1": {
        "inline": "{i0}.expandtabs({i1})",
        "inputs": [
            "str",
            "egp_integral"
        ],
        "description": "expand tabs"
    },
    "find1": {
        "inline": "{i0}.find({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "find",
        "outputs": [
            "int"
        ]
    },
    "find2": {
        "inline": "{i0}.find({i1}, {i2})",
        "inputs": [
            "str",
            "str",
            "egp_integral"
        ],
        "description": "find from",
        "outputs": [
            "int"
        ]
    },
    "find3": {
        "inline": "{i0}.find({i1}, {i2}, {i3})",
        "inputs": [
            "str",
            "str",
            "egp_integral",
            "egp_integral"
        ],
        "description": "find from to",
        "outputs": [
            "int"
        ]
    },
    "isalnum": {
        "inline": "{i0}.isalnum()",
        "description": "is alphanumeric",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "isalpha": {
        "inline": "{i0}.isalpha()",
        "description": "is alphabetic",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "isascii": {
        "inline": "{i0}.isascii()",
        "description": "is ASCII",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "isdecimal": {
        "inline": "{i0}.isdecimal()",
        "description": "is decimal",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "isdigit": {
        "inline": "{i0}.isdigit()",
        "description": "is digit",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "isidentifier": {
        "inline": "{i0}.isidentifier()",
        "description": "is identifier",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "islower": {
        "inline": "{i0}.islower()",
        "description": "is lower case",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "isnumeric": {
        "inline": "{i0}.isnumeric()",
        "description": "is numeric",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "isprintable": {
        "inline": "{i0}.isprintable()",
        "description": "is printable",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "isspace": {
        "inline": "{i0}.isspace()",
        "description": "is whitespace",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "istitle": {
        "inline": "{i0}.istitle()",
        "description": "is title case",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "isupper": {
        "inline": "{i0}.isupper()",
        "description": "is upper case",
        "num_inputs": 1,
        "outputs": [
            "bool"
        ]
    },
    "join": {
        "inline": "{i0}.join({i1})",
        "inputs": [
            "str",
            "Iterable[str]"
        ],
        "description": "join"
    },
    "ljust1": {
        "inline": "{i0}.ljust({i1})",
        "inputs": [
            "str",
            "egp_integral"
        ],
        "description": "left justify space"
    },
    "ljust2": {
        "inline": "{i0}.ljust({i1}, {i2})",
        "inputs": [
            "str",
            "egp_integral",
            "str"
        ],
        "description": "left justify with fill character"
    },
    "lower": {
        "inline": "{i0}.lower()",
        "description": "lower case",
        "num_inputs": 1
    },
    "lstrip1": {
        "inline": "{i0}.lstrip()",
        "description": "left strip space",
        "num_inputs": 1
    },
    "lstrip2": {
        "inline": "{i0}.lstrip({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "left strip chars"
    },
    "ord": {
        "inline": "ord({i0}[0])",
        "description": "ASCII value",
        "num_inputs": 1,
        "outputs": [
            "int"
        ]
    },
    "partition": {
        "inline": "{i0}.partition({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "partition",
        "outputs": [
            "Triplet[str, str, str]"
        ]
    },
    "removeprefix": {
        "inline": "{i0}.removeprefix({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "remove prefix"
    },
    "removesuffix": {
        "inline": "{i0}.removesuffix({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "remove suffix"
    },
    "replace1": {
        "inline": "{i0}.replace({i1}, {i2})",
        "inputs": [
            "str",
            "str",
            "str"
        ],
        "description": "replace"
    },
    "replace2": {
        "inline": "{i0}.replace({i1}, {i2}, {i3})",
        "inputs": [
            "str",
            "str",
            "str",
            "egp_integral"
        ],
        "description": "replace count"
    },
    "rfind1": {
        "inline": "{i0}.rfind({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "rfind",
        "outputs": [
            "int"
        ]
    },
    "rfind2": {
        "inline": "{i0}.rfind({i1}, {i2})",
        "inputs": [
            "str",
            "str",
            "egp_integral"
        ],
        "description": "rfind from",
        "outputs": [
            "int"
        ]
    },
    "rfind3": {
        "inline": "{i0}.rfind({i1}, {i2}, {i3})",
        "inputs": [
            "str",
            "str",
            "egp_integral",
            "egp_integral"
        ],
        "description": "rfind from to",
        "outputs": [
            "int"
        ]
    },
    "rindex1": {
        "inline": "{i0}.rindex({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "rindex",
        "outputs": [
            "int"
        ]
    },
    "rindex2": {
        "inline": "{i0}.rindex({i1}, {i2})",
        "inputs": [
            "str",
            "str",
            "egp_integral"
        ],
        "description": "rindex from",
        "outputs": [
            "int"
        ]
    },
    "rindex3": {
        "inline": "{i0}.rindex({i1}, {i2}, {i3})",
        "inputs": [
            "str",
            "str",
            "egp_integral",
            "egp_integral"
        ],
        "description": "rindex from to",
        "outputs": [
            "int"
        ]
    },
    "rjust1": {
        "inline": "{i0}.rjust({i1})",
        "inputs": [
            "str",
            "egp_integral"
        ],
        "description": "right justify space"
    },
    "rjust2": {
        "inline": "{i0}.rjust({i1}, {i2})",
        "inputs": [
            "str",
            "egp_integral",
            "str"
        ],
        "description": "right justify with fill character"
    },
    "rpartition": {
        "inline": "{i0}.rpartition({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "rpartition",
        "outputs": [
            "Triplet[str, str, str]"
        ]
    },
    "rsplit1": {
        "inline": "{i0}.rsplit()",
        "description": "right split space",
        "num_inputs": 1,
        "outputs": [
            "list[str]"
        ]
    },
    "rsplit2": {
        "inline": "{i0}.rsplit({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "right split",
        "outputs": [
            "list[str]"
        ]
    },
    "rsplit3": {
        "inline": "{i0}.rsplit({i1}, {i2})",
        "inputs": [
            "str",
            "str",
            "egp_integral"
        ],
        "description": "right split max",
        "outputs": [
            "list[str]"
        ]
    },
    "rstrip1": {
        "inline": "{i0}.rstrip()",
        "description": "right strip space",
        "num_inputs": 1
    },
    "rstrip2": {
        "inline": "{i0}.rstrip({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "right strip chars"
    },
    "split1": {
        "inline": "{i0}.split()",
        "description": "split space",
        "num_inputs": 1,
        "outputs": [
            "list[str]"
        ]
    },
    "split2": {
        "inline": "{i0}.split({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "split",
        "outputs": [
            "list[str]"
        ]
    },
    "split3": {
        "inline": "{i0}.split({i1}, {i2})",
        "inputs": [
            "str",
            "str",
            "egp_integral"
        ],
        "description": "split max",
        "outputs": [
            "list[str]"
        ]
    },
    "splitlines1": {
        "inline": "{i0}.splitlines()",
        "description": "split lines",
        "num_inputs": 1,
        "outputs": [
            "list[str]"
        ]
    },
    "splitlines2": {
        "inline": "{i0}.splitlines({i1})",
        "inputs": [
            "str",
            "bool"
        ],
        "description": "split lines keepends",
        "outputs": [
            "list[str]"
        ]
    },
    "startswith1": {
        "inline": "{i0}.startswith({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "starts with",
        "outputs": [
            "bool"
        ]
    },
    "startswith2": {
        "inline": "{i0}.startswith({i1}, 0, {i2})",
        "inputs": [
            "str",
            "str",
            "egp_integral"
        ],
        "description": "starts with from",
        "outputs": [
            "bool"
        ]
    },
    "startswith3": {
        "inline": "{i0}.startswith({i1}, {i2}, {i3})",
        "inputs": [
            "str",
            "str",
            "egp_integral",
            "egp_integral"
        ],
        "description": "starts with from to",
        "outputs": [
            "bool"
        ]
    },
    "str0": {
        "inline": "str()",
        "description": "str",
        "num_inputs": 1,
        "outputs": [
            "str"
        ]
    },
    "str1": {
        "inline": "str({i0})",
        "inputs": [
            "object"
        ],
        "description": "str",
        "outputs": [
            "str"
        ]
    },
    "strip1": {
        "inline": "{i0}.strip()",
        "description": "strip space",
        "num_inputs": 1,
        "outputs": [
            "str"
        ]
    },
    "strip2": {
        "inline": "{i0}.strip({i1})",
        "inputs": [
            "str",
            "str"
        ],
        "description": "strip chars",
        "outputs": [
            "str"
        ]
    },
    "swapcase": {
        "inline": "{i0}.swapcase()",
        "description": "swap case",
        "num_inputs": 1
    },
    "title": {
        "inline": "{i0}.title()",
        "description": "title case",
        "num_inputs": 1
    },
    "translate1": {
        "inline": "{i0}.translate({i1}.maketrans({i1},{i2}))",
        "inputs": [
            "str",
            "str",
            "str"
        ],
        "description": "translate",
        "outputs": [
            "str"
        ]
    },
    "translate2": {
        "inline": "{i0}.translate({i1}.maketrans({i1}, {i2}), {i3})",
        "inputs": [
            "str",
            "str",
            "str",
            "str"
        ],
        "description": "translate",
        "outputs": [
            "str"
        ]
    },
    "upper": {
        "inline": "{i0}.upper()",
        "description": "upper case",
        "num_inputs": 1
    },
    "zfill": {
        "inline": "{i0}.zfill({i1})",
        "inputs": [
            "str",
            "egp_integral"
        ],
        "description": "zero fill",
        "outputs": [
            "str"
        ]
    }
}