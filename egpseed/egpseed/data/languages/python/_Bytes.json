{
    "capitalize": {
        "inline": "{i0}.capitalize()",
        "inputs": [
            "Bytes"
        ],
        "description": "capitalize",
        "outputs": [
            "0_0"
        ]
    },
    "center1": {
        "inline": "{i0}.center({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "center with space",
        "outputs": [
            "0_0"
        ]
    },
    "center2": {
        "inline": "{i0}.center({i1}, {i2})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "center with fill byte",
        "outputs": [
            "0_0"
        ]
    },
    "count1": {
        "inline": "{i0}.count({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "count",
        "outputs": [
            "int"
        ]
    },
    "count2": {
        "inline": "{i0}.count({i1}, {i2})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "count from",
        "outputs": [
            "int"
        ]
    },
    "count3": {
        "inline": "{i0}.count({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "count from to",
        "outputs": [
            "int"
        ]
    },
    "count4": {
        "inline": "{i0}.count({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "count",
        "outputs": [
            "int"
        ]
    },
    "count5": {
        "inline": "{i0}.count({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "count from",
        "outputs": [
            "int"
        ]
    },
    "count6": {
        "inline": "{i0}.count({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "count from to",
        "outputs": [
            "int"
        ]
    },
    "decode1": {
        "inline": "{i0}.decode({i1})",
        "inputs": [
            "Bytes",
            "str"
        ],
        "description": "decode",
        "outputs": [
            "str"
        ]
    },
    "endswith1": {
        "inline": "{i0}.endswith({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "ends with",
        "outputs": [
            "bool"
        ]
    },
    "endswith2": {
        "inline": "{i0}.endswith({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "ends with after",
        "outputs": [
            "bool"
        ]
    },
    "endswith3": {
        "inline": "{i0}.endswith({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "ends with between",
        "outputs": [
            "bool"
        ]
    },
    "endswith4": {
        "inline": "{i0}.endswith({i1})",
        "inputs": [
            "Bytes",
            "tuple[Bytes, ...]"
        ],
        "description": "ends with one of",
        "outputs": [
            "bool"
        ]
    },
    "endswith5": {
        "inline": "{i0}.endswith({i1}, {i2})",
        "inputs": [
            "Bytes",
            "tuple[Bytes, ...]",
            "EGPIntegral"
        ],
        "description": "ends with one of after",
        "outputs": [
            "bool"
        ]
    },
    "endswith6": {
        "inline": "{i0}.endswith({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "tuple[Bytes, ...]",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "ends with one of between",
        "outputs": [
            "bool"
        ]
    },
    "expandtabs1": {
        "inline": "{i0}.expandtabs()",
        "inputs": [
            "Bytes"
        ],
        "description": "expand tabs",
        "outputs": [
            "0_0"
        ]
    },
    "expandtabs2": {
        "inline": "{i0}.expandtabs({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "expand tabs",
        "outputs": [
            "0_0"
        ]
    },
    "find1": {
        "inline": "{i0}.find({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "find",
        "outputs": [
            "int"
        ]
    },
    "find2": {
        "inline": "{i0}.find({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "find after",
        "outputs": [
            "int"
        ]
    },
    "find3": {
        "inline": "{i0}.find({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "find between",
        "outputs": [
            "int"
        ]
    },
    "find4": {
        "inline": "{i0}.find({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "find one of",
        "outputs": [
            "int"
        ]
    },
    "find5": {
        "inline": "{i0}.find({i1}, {i2})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "find one of after",
        "outputs": [
            "int"
        ]
    },
    "find6": {
        "inline": "{i0}.find({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "find one of between",
        "outputs": [
            "int"
        ]
    },
    "index1": {
        "inline": "{i0}.index({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "index",
        "outputs": [
            "int"
        ]
    },
    "index2": {
        "inline": "{i0}.index({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "index after",
        "outputs": [
            "int"
        ]
    },
    "index3": {
        "inline": "{i0}.index({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "index between",
        "outputs": [
            "int"
        ]
    },
    "index4": {
        "inline": "{i0}.index({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "index one of",
        "outputs": [
            "int"
        ]
    },
    "index5": {
        "inline": "{i0}.index({i1}, {i2})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "index one of after",
        "outputs": [
            "int"
        ]
    },
    "index6": {
        "inline": "{i0}.index({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "index one of between",
        "outputs": [
            "int"
        ]
    },
    "isalnum": {
        "inline": "{i0}.isalnum()",
        "inputs": [
            "Bytes"
        ],
        "description": "is alphanumeric",
        "outputs": [
            "bool"
        ]
    },
    "isalpha": {
        "inline": "{i0}.isalpha()",
        "inputs": [
            "Bytes"
        ],
        "description": "is alphabetic",
        "outputs": [
            "bool"
        ]
    },
    "isascii": {
        "inline": "{i0}.isascii()",
        "inputs": [
            "Bytes"
        ],
        "description": "is ascii",
        "outputs": [
            "bool"
        ]
    },
    "isdigit": {
        "inline": "{i0}.isdigit()",
        "inputs": [
            "Bytes"
        ],
        "description": "is digit",
        "outputs": [
            "bool"
        ]
    },
    "islower": {
        "inline": "{i0}.islower()",
        "inputs": [
            "Bytes"
        ],
        "description": "is lower",
        "outputs": [
            "bool"
        ]
    },
    "isspace": {
        "inline": "{i0}.isspace()",
        "inputs": [
            "Bytes"
        ],
        "description": "is space",
        "outputs": [
            "bool"
        ]
    },
    "istitle": {
        "inline": "{i0}.istitle()",
        "inputs": [
            "Bytes"
        ],
        "description": "is title",
        "outputs": [
            "bool"
        ]
    },
    "isupper": {
        "inline": "{i0}.isupper()",
        "inputs": [
            "Bytes"
        ],
        "description": "is upper",
        "outputs": [
            "bool"
        ]
    },
    "join": {
        "inline": "{i0}.join({i1})",
        "inputs": [
            "Bytes",
            "Iterable[Bytes, ...]"
        ],
        "description": "join",
        "outputs": [
            "0_0"
        ]
    },
    "ljust1": {
        "inline": "{i0}.ljust({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "left justify with space",
        "outputs": [
            "0_0"
        ]
    },
    "ljust2": {
        "inline": "{i0}.ljust({i1}, {i2})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "left justify with fill byte",
        "outputs": [
            "0_0"
        ]
    },
    "lower": {
        "inline": "{i0}.lower()",
        "inputs": [
            "Bytes"
        ],
        "description": "lower",
        "outputs": [
            "0_0"
        ]
    },
    "lstrip1": {
        "inline": "{i0}.lstrip()",
        "inputs": [
            "Bytes"
        ],
        "description": "left strip",
        "outputs": [
            "0_0"
        ]
    },
    "lstrip2": {
        "inline": "{i0}.lstrip({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "left strip",
        "outputs": [
            "0_0"
        ]
    },
    "partition": {
        "inline": "{i0}.partition({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "partition",
        "outputs": [
            "Triplet[0_0, 0_0, 0_0]"
        ]
    },
    "removeprefix": {
        "inline": "{i0}.removeprefix({i1})",
        "inputs": [
            "Bytes",
            "Bytes2"
        ],
        "description": "remove prefix",
        "outputs": [
            "0_0"
        ]
    },
    "removesuffix": {
        "inline": "{i0}.removesuffix({i1})",
        "inputs": [
            "Bytes",
            "Bytes2"
        ],
        "description": "remove suffix",
        "outputs": [
            "0_0"
        ]
    },
    "replace1": {
        "inline": "{i0}.replace({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "Bytes"
        ],
        "description": "replace",
        "outputs": [
            "0_0"
        ]
    },
    "replace2": {
        "inline": "{i0}.replace({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "replace",
        "outputs": [
            "0_0"
        ]
    },
    "rfind1": {
        "inline": "{i0}.rfind({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "rfind",
        "outputs": [
            "int"
        ]
    },
    "rfind2": {
        "inline": "{i0}.rfind({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "rfind after",
        "outputs": [
            "int"
        ]
    },
    "rfind3": {
        "inline": "{i0}.rfind({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "rfind between",
        "outputs": [
            "int"
        ]
    },
    "rfind4": {
        "inline": "{i0}.rfind({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "rfind one of",
        "outputs": [
            "int"
        ]
    },
    "rfind5": {
        "inline": "{i0}.rfind({i1}, {i2})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "rfind one of after",
        "outputs": [
            "int"
        ]
    },
    "rfind6": {
        "inline": "{i0}.rfind({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "rfind one of between",
        "outputs": [
            "int"
        ]
    },
    "rindex1": {
        "inline": "{i0}.rindex({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "rindex",
        "outputs": [
            "int"
        ]
    },
    "rindex2": {
        "inline": "{i0}.rindex({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "rindex after",
        "outputs": [
            "int"
        ]
    },
    "rindex3": {
        "inline": "{i0}.rindex({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "rindex between",
        "outputs": [
            "int"
        ]
    },
    "rindex4": {
        "inline": "{i0}.rindex({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "rindex one of",
        "outputs": [
            "int"
        ]
    },
    "rindex5": {
        "inline": "{i0}.rindex({i1}, {i2})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "rindex one of after",
        "outputs": [
            "int"
        ]
    },
    "rindex6": {
        "inline": "{i0}.rindex({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "rindex one of between",
        "outputs": [
            "int"
        ]
    },
    "rjust1": {
        "inline": "{i0}.rjust({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "right justify with space",
        "outputs": [
            "0_0"
        ]
    },
    "rjust2": {
        "inline": "{i0}.rjust({i1}, {i2})",
        "inputs": [
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "right justify with fill byte",
        "outputs": [
            "0_0"
        ]
    },
    "rpartition": {
        "inline": "{i0}.rpartition({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "rpartition",
        "outputs": [
            "Triplet[0_0, 0_0, 0_0]"
        ]
    },
    "rsplit1": {
        "inline": "{i0}.rsplit()",
        "inputs": [
            "Bytes"
        ],
        "description": "right split",
        "outputs": [
            "list[0_0]"
        ]
    },
    "rsplit2": {
        "inline": "{i0}.rsplit({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "right split",
        "outputs": [
            "list[0_0]"
        ]
    },
    "rsplit3": {
        "inline": "{i0}.rsplit({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "right split",
        "outputs": [
            "list[0_0]"
        ]
    },
    "rstrip1": {
        "inline": "{i0}.rstrip()",
        "inputs": [
            "Bytes"
        ],
        "description": "right strip",
        "outputs": [
            "0_0"
        ]
    },
    "rstrip2": {
        "inline": "{i0}.rstrip({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "right strip",
        "outputs": [
            "0_0"
        ]
    },
    "split1": {
        "inline": "{i0}.split()",
        "inputs": [
            "Bytes"
        ],
        "description": "split",
        "outputs": [
            "list[0_0]"
        ]
    },
    "split2": {
        "inline": "{i0}.split({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "split",
        "outputs": [
            "list[0_0]"
        ]
    },
    "split3": {
        "inline": "{i0}.split({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "split",
        "outputs": [
            "list[0_0]"
        ]
    },
    "splitlines1": {
        "inline": "{i0}.splitlines()",
        "inputs": [
            "Bytes"
        ],
        "description": "split lines",
        "outputs": [
            "list[0_0]"
        ]
    },
    "splitlines2": {
        "inline": "{i0}.splitlines({i1})",
        "inputs": [
            "Bytes",
            "bool"
        ],
        "description": "split lines",
        "outputs": [
            "list[0_0]"
        ]
    },
    "startswith1": {
        "inline": "{i0}.startswith({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "starts with",
        "outputs": [
            "bool"
        ]
    },
    "startswith2": {
        "inline": "{i0}.startswith({i1}, {i2})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral"
        ],
        "description": "starts with after",
        "outputs": [
            "bool"
        ]
    },
    "startswith3": {
        "inline": "{i0}.startswith({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "Bytes",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "starts with between",
        "outputs": [
            "bool"
        ]
    },
    "startswith4": {
        "inline": "{i0}.startswith({i1})",
        "inputs": [
            "Bytes",
            "tuple[Bytes, ...]"
        ],
        "description": "starts with one of",
        "outputs": [
            "bool"
        ]
    },
    "startswith5": {
        "inline": "{i0}.startswith({i1}, {i2})",
        "inputs": [
            "Bytes",
            "tuple[Bytes, ...]",
            "EGPIntegral"
        ],
        "description": "starts with one of after",
        "outputs": [
            "bool"
        ]
    },
    "startswith6": {
        "inline": "{i0}.startswith({i1}, {i2}, {i3})",
        "inputs": [
            "Bytes",
            "tuple[Bytes, ...]",
            "EGPIntegral",
            "EGPIntegral"
        ],
        "description": "starts with one of between",
        "outputs": [
            "bool"
        ]
    },
    "strip1": {
        "inline": "{i0}.strip()",
        "inputs": [
            "Bytes"
        ],
        "description": "strip",
        "outputs": [
            "0_0"
        ]
    },
    "strip2": {
        "inline": "{i0}.strip({i1})",
        "inputs": [
            "Bytes",
            "Bytes"
        ],
        "description": "strip",
        "outputs": [
            "0_0"
        ]
    },
    "swapcase": {
        "inline": "{i0}.swapcase()",
        "inputs": [
            "Bytes"
        ],
        "description": "swap case",
        "outputs": [
            "0_0"
        ]
    },
    "title": {
        "inline": "{i0}.title()",
        "inputs": [
            "Bytes"
        ],
        "description": "title",
        "outputs": [
            "0_0"
        ]
    },
    "translate1": {
        "inline": "{i0}.translate({i1}.maketrans({i1},{i2}))",
        "inputs": [
            "Bytes",
            "Bytes",
            "Bytes"
        ],
        "description": "translate",
        "outputs": [
            "0_0"
        ]
    },
    "translate2": {
        "inline": "{i0}.translate({i1}.maketrans({i1}, {i2}), {i3})",
        "inputs": [
            "Bytes",
            "Bytes",
            "Bytes",
            "Bytes"
        ],
        "description": "translate",
        "outputs": [
            "0_0"
        ]
    },
    "upper": {
        "inline": "{i0}.upper()",
        "inputs": [
            "Bytes"
        ],
        "description": "upper",
        "outputs": [
            "0_0"
        ]
    },
    "zfill": {
        "inline": "{i0}.zfill({i1})",
        "inputs": [
            "Bytes",
            "EGPIntegral"
        ],
        "description": "zfill",
        "outputs": [
            "0_0"
        ]
    }
}