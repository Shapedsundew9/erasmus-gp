"""Test the End Point Type functions."""

from unittest import TestCase

from egpcommon.egp_log import Logger, egp_logger

from egppy.gc_graph.end_point.end_point_type import end_point_type, ept_to_str, str_to_ept
from egppy.gc_graph.end_point.types_def import types_db

# Standard EGP logging pattern
_logger: Logger = egp_logger(name=__name__)


type_hints = [
    "int",
    "float",
    "str",
    "bool",
    "bytes",
    "list[int]",
    "list[float]",
    "list[str]",
    "list[bool]",
    "tuple[int, ...]",
    "tuple[float, ...]",
    "tuple[str, ...]",
    "dict[str, int]",
    "dict[int, float]",
    "dict[str, str]",
    "dict[str, list[int]]",
    "dict[int, tuple[float, ...]]",
    "list[list[int]]",
    "list[list[str]]",
    "list[tuple[int, ...]]",
    "tuple[list[int], ...]",
    "tuple[dict[str, int], ...]",
    "dict[str, dict[int, float]]",
    "dict[int, list[tuple[bool, ...]]]",
    "list[dict[str, list[int]]]",
    "set[int]",
    "set[str]",
    "frozenset[float]",
    "list[set[int]]",
    "dict[str, set[bool]]",
    "tuple[set[int], ...]",
    "set[list[int]]",
    "dict[str, frozenset[tuple[int, ...]]]",
    "list[set[dict[str, int]]]",
    "Iterator[int]",
    "Iterator[str]",
    "Iterable[float]",
    "list[Iterator[int]]",
    "dict[str, Iterable[bool]]",
    "tuple[Iterator[int], ...]",
    "Sequence[int]",
    "Sequence[str]",
    "MutableSequence[float]",
    "list[Sequence[int]]",
    "dict[str, MutableSequence[bool]]",
    "tuple[Sequence[int], ...]",
    "Mapping[str, int]",
    "Mapping[int, float]",
    "MutableMapping[str, bool]",
    "list[Mapping[str, int]]",
    "dict[str, MutableMapping[int, float]]",
    "tuple[Mapping[str, int], ...]",
    "list[dict[str, list[int]]]",
    "list[dict[str, tuple[int, ...]]]",
    "list[dict[str, dict[int, str]]]",
    "dict[str, list[tuple[int, ...]]]",
    "dict[str, list[dict[int, str]]]",
    "dict[str, dict[int, list[float]]]",
    "tuple[list[dict[str, int]], ...]",
    "tuple[dict[str, list[int]], ...]",
    "tuple[list[dict[str, float]], ...]",
    "list[tuple[dict[str, int], ...]]",
    "dict[str, tuple[dict[int, float], ...]]",
]

type_defs = [
    (types_db["int"],),
    (types_db["float"],),
    (types_db["str"],),
    (types_db["bool"],),
    (types_db["bytes"],),
    (types_db["list"], types_db["int"]),
    (types_db["list"], types_db["float"]),
    (types_db["list"], types_db["str"]),
    (types_db["list"], types_db["bool"]),
    (types_db["tuple"], types_db["int"]),
    (types_db["tuple"], types_db["float"]),
    (types_db["tuple"], types_db["str"]),
    (types_db["dict"], types_db["str"], types_db["int"]),
    (types_db["dict"], types_db["int"], types_db["float"]),
    (types_db["dict"], types_db["str"], types_db["str"]),
    (types_db["dict"], types_db["str"], types_db["list"], types_db["int"]),
    (types_db["dict"], types_db["int"], types_db["tuple"], types_db["float"]),
    (types_db["list"], types_db["list"], types_db["int"]),
    (types_db["list"], types_db["list"], types_db["str"]),
    (types_db["list"], types_db["tuple"], types_db["int"]),
    (types_db["tuple"], types_db["list"], types_db["int"]),
    (types_db["tuple"], types_db["dict"], types_db["str"], types_db["int"]),
    (types_db["dict"], types_db["str"], types_db["dict"], types_db["int"], types_db["float"]),
    (types_db["dict"], types_db["int"], types_db["list"], types_db["tuple"], types_db["bool"]),
    (types_db["list"], types_db["dict"], types_db["str"], types_db["list"], types_db["int"]),
    (types_db["set"], types_db["int"]),
    (types_db["set"], types_db["str"]),
    (types_db["frozenset"], types_db["float"]),
    (types_db["list"], types_db["set"], types_db["int"]),
    (types_db["dict"], types_db["str"], types_db["set"], types_db["bool"]),
    (types_db["tuple"], types_db["set"], types_db["int"]),
    (types_db["set"], types_db["list"], types_db["int"]),
    (types_db["dict"], types_db["str"], types_db["frozenset"], types_db["tuple"], types_db["int"]),
    (types_db["list"], types_db["set"], types_db["dict"], types_db["str"], types_db["int"]),
    (types_db["Iterator"], types_db["int"]),
    (types_db["Iterator"], types_db["str"]),
    (types_db["Iterable"], types_db["float"]),
    (types_db["list"], types_db["Iterator"], types_db["int"]),
    (types_db["dict"], types_db["str"], types_db["Iterable"], types_db["bool"]),
    (types_db["tuple"], types_db["Iterator"], types_db["int"]),
    (types_db["Sequence"], types_db["int"]),
    (types_db["Sequence"], types_db["str"]),
    (types_db["MutableSequence"], types_db["float"]),
    (types_db["list"], types_db["Sequence"], types_db["int"]),
    (types_db["dict"], types_db["str"], types_db["MutableSequence"], types_db["bool"]),
    (types_db["tuple"], types_db["Sequence"], types_db["int"]),
    (types_db["Mapping"], types_db["str"], types_db["int"]),
    (types_db["Mapping"], types_db["int"], types_db["float"]),
    (types_db["MutableMapping"], types_db["str"], types_db["bool"]),
    (types_db["list"], types_db["Mapping"], types_db["str"], types_db["int"]),
    (
        types_db["dict"],
        types_db["str"],
        types_db["MutableMapping"],
        types_db["int"],
        types_db["float"],
    ),
    (types_db["tuple"], types_db["Mapping"], types_db["str"], types_db["int"]),
    (types_db["list"], types_db["dict"], types_db["str"], types_db["list"], types_db["int"]),
    (types_db["list"], types_db["dict"], types_db["str"], types_db["tuple"], types_db["int"]),
    (
        types_db["list"],
        types_db["dict"],
        types_db["str"],
        types_db["dict"],
        types_db["int"],
        types_db["str"],
    ),
    (
        types_db["dict"],
        types_db["str"],
        types_db["list"],
        types_db["tuple"],
        types_db["int"],
        types_db["float"],
    ),
    (
        types_db["dict"],
        types_db["str"],
        types_db["list"],
        types_db["dict"],
        types_db["int"],
        types_db["str"],
    ),
    (
        types_db["dict"],
        types_db["str"],
        types_db["dict"],
        types_db["int"],
        types_db["list"],
        types_db["float"],
    ),
    (types_db["tuple"], types_db["list"], types_db["dict"], types_db["str"], types_db["int"]),
    (types_db["tuple"], types_db["dict"], types_db["str"], types_db["list"], types_db["int"]),
    (types_db["tuple"], types_db["list"], types_db["dict"], types_db["str"], types_db["float"]),
    (types_db["list"], types_db["tuple"], types_db["dict"], types_db["str"], types_db["int"]),
    (
        types_db["dict"],
        types_db["str"],
        types_db["tuple"],
        types_db["dict"],
        types_db["int"],
        types_db["float"],
    ),
]


class TestEndPointType(TestCase):
    """Test the End Point Type functions."""

    def test_end_point_type(self):
        """Test the end_point_type function."""
        for type_hint, type_def in zip(type_hints, type_defs, strict=True):
            ept1 = str_to_ept(type_hint)
            ept2 = end_point_type(type_def)
            self.assertIs(ept1, ept2)
            ept_str = ept_to_str(ept1)
            self.assertEqual(type_hint, ept_str)
